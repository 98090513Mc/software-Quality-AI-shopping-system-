# تثبيت المكتبات اللازمة
if (!require(shiny)) install.packages("shiny")
if (!require(recommenderlab)) install.packages("recommenderlab")

# تحميل المكتبات
library(shiny)
library(recommenderlab)

# بيانات وهمية لتاريخ الشراء
user_data <- matrix(
  c(5, 4, 0, 0, 3, 0,
    0, 0, 5, 4, 0, 0,
    3, 0, 0, 0, 5, 4),
  nrow = 3,
  byrow = TRUE
)

colnames(user_data) <- c("Laptop", "Mouse", "Keyboard", "Monitor", "Phone", "Tablet")
rownames(user_data) <- c("User1", "User2", "User3")

# تحويل البيانات إلى مصفوفة تقييم
ratings <- as(user_data, "realRatingMatrix")

# تدريب نظام التوصيات
rec_model <- Recommender(ratings, method = "UBCF")

# واجهة المستخدم
ui <- fluidPage(
  titlePanel("AI Shopping Assistant"),
  sidebarLayout(
    sidebarPanel(
      selectInput("user", "Select User:", choices = rownames(user_data)),
      actionButton("recommend", "Get Recommendations")
    ),
    mainPanel(
      h3("Recommendations:"),
      tableOutput("recommendations")
    )
  )
)

# الخادم
server <- function(input, output) {
  observeEvent(input$recommend, {
    user_id <- input$user
    
    # تقديم التوصيات
    recommendations <- predict(rec_model, ratings[user_id, ], n = 3)
    rec_list <- as(recommendations, "list")[[1]]
    
    # عرض التوصيات
    output$recommendations <- renderTable({
      if (length(rec_list) == 0) {
        data.frame(Product = "No recommendations available")
      } else {
        data.frame(Product = rec_list)
      }
    })
  })
}

# تشغيل التطبيق
shinyApp(ui = ui, server = server)
